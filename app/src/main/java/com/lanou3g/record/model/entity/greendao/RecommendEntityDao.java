package com.lanou3g.record.model.entity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECOMMEND_ENTITY".
*/
public class RecommendEntityDao extends AbstractDao<RecommendEntity, Long> {

    public static final String TABLENAME = "RECOMMEND_ENTITY";

    /**
     * Properties of entity RecommendEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Tag = new Property(2, String.class, "tag", false, "TAG");
        public final static Property Share_title = new Property(3, String.class, "share_title", false, "SHARE_TITLE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Share = new Property(5, String.class, "share", false, "SHARE");
        public final static Property Thumb = new Property(6, String.class, "thumb", false, "THUMB");
        public final static Property Published_at = new Property(7, String.class, "published_at", false, "PUBLISHED_AT");
        public final static Property Url = new Property(8, String.class, "url", false, "URL");
        public final static Property Channel = new Property(9, String.class, "channel", false, "CHANNEL");
        public final static Property Label = new Property(10, String.class, "label", false, "LABEL");
        public final static Property Label_color = new Property(11, String.class, "label_color", false, "LABEL_COLOR");
        public final static Property Scheme = new Property(12, String.class, "scheme", false, "SCHEME");
        public final static Property Comments_total = new Property(13, Integer.class, "comments_total", false, "COMMENTS_TOTAL");
    };


    public RecommendEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RecommendEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOMMEND_ENTITY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TAG\" TEXT," + // 2: tag
                "\"SHARE_TITLE\" TEXT," + // 3: share_title
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"SHARE\" TEXT," + // 5: share
                "\"THUMB\" TEXT," + // 6: thumb
                "\"PUBLISHED_AT\" TEXT," + // 7: published_at
                "\"URL\" TEXT," + // 8: url
                "\"CHANNEL\" TEXT," + // 9: channel
                "\"LABEL\" TEXT," + // 10: label
                "\"LABEL_COLOR\" TEXT," + // 11: label_color
                "\"SCHEME\" TEXT," + // 12: scheme
                "\"COMMENTS_TOTAL\" INTEGER);"); // 13: comments_total
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOMMEND_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecommendEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }
 
        String share_title = entity.getShare_title();
        if (share_title != null) {
            stmt.bindString(4, share_title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String share = entity.getShare();
        if (share != null) {
            stmt.bindString(6, share);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(7, thumb);
        }
 
        String published_at = entity.getPublished_at();
        if (published_at != null) {
            stmt.bindString(8, published_at);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(10, channel);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(11, label);
        }
 
        String label_color = entity.getLabel_color();
        if (label_color != null) {
            stmt.bindString(12, label_color);
        }
 
        String scheme = entity.getScheme();
        if (scheme != null) {
            stmt.bindString(13, scheme);
        }
 
        Integer comments_total = entity.getComments_total();
        if (comments_total != null) {
            stmt.bindLong(14, comments_total);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecommendEntity readEntity(Cursor cursor, int offset) {
        RecommendEntity entity = new RecommendEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // share_title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // share
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thumb
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // published_at
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // channel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // label
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // label_color
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // scheme
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // comments_total
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecommendEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShare_title(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShare(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setThumb(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPublished_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChannel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLabel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLabel_color(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setScheme(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setComments_total(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecommendEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecommendEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
